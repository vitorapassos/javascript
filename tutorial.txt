usuário: t-334031
senha: G1JTXfK8

usuário: t-354645
senha: uX34UgPh

# Lógica de programação

# Photshop

# front-end
- HTML5 e CSS3
- UX UI
- JavaScript
- Frameworks (bootstrap)
- CMS (wordpress)

# banco de dados

# sistemas desktop
electron

# back-end (Java ou php)

# testes

# pi
___________________________________
Lógica de programação
- variáveis
- operadores
- algorítmo
- estruturas de controle
- POO
- estruturas de dados


___________________________________
MANDAMENTOS DA PROGRAMAÇÃO

1) UX (User eXperience) - desenvolver sempre pensado na experiência do usuário.

Dica de video: maior tapa que o Steve Jobs já deu em um programador

2) Usar o mínimo possível de código (variáveis, operadores, comparadores, estruturas
de controle etc) para resolver o problema (lembrar do marcapasso)
>=
maior                       OU                                            igual
comparador                função lógica                                  comparador

ou

>
comparador 

3) Entender o problema. Não adianta sentar na frente do computador se você não sabe
resolver o problema.
Algorítmo ("receita do bolo")
Conceito:
           variáveis
entrada - processamento - saída
___________________________________
GIT e GITHUB

Comandos básicos do git:
git config --global user.name "Seu nome"
git config --global user.email "seuemail@email.com"
git clone url_do_repositório (Clonar um repositório)
git add . (Adiciona ao repositório local)
git commit -m "tutorial" (Documentar as alterações)
git push (Enviar ao repositório GitHub)
git status (Verifica ser houve alterações de código)
git pull (Sincroniza as informações do repositório) no PC


Sempre que projeto o projeto for editado em outra maquina: git pull para 
Para verificar se houve alterações na sua maquina: git status
Se houve alteração: git add .
Depois de adicionar no "container" é necessário fechar o containter
e identificar o que foi guardado/alterado: git commit -m "Descrição objetiva do que foi alterado"
Agora que foi guardado e identificado só falta enviar para o repositório/Navio: git push

Gerar token GitHub
1) Settings
2) Developer Settings
3) Token classic
4) Gerar o token selecionando tudo, guardar o token

________________________________________________________________________________________

Boas práticas na programação
1) Cabeçalho de documentação
Comentário: /**
    Nome do projeto
    Descrição da classe / função
    @author Vitor de Assis
    @version 1.0
    Link para repositório (OPCIONAL)
*/ Fim Comentário

2) Nomes de arquivos, variáveis, funções, classes, etc 
Regras (clean code)
- Declarar nomes que tenham relação com o problema
- Não usar espaço, "ç", acentos e caracteres especiais para delcaração de nomes (Erros internos no programa)
- Só classes iniciam om letras maiúsculas
- Constantes e variáveis não iniciar um nome com número
- Quando for declarar dois nomes usar a técnica do camelo(camel case )
Exemplo: nomeCliente


________________________________________________________________________________________

Comandos básicos do MS-DOS 
cls -> Limpar
dir -> Listar arquivos e diretórios(pastas)
cd "diretorio" -> acessar o diretório 
cd .. -> voltar para o diretório anterior 



________________________________________________________________________________________

Node - Plataforma que permite a execução do JavaScript fora do navegador(Browser)
https://nodejs.org/pt (Sempre usar a versão LTS-Longo Termo de Serviço)

Comando básicos:
node -v (Versão do node)


Gerencidor de pacote para o node
npm está relacionado a pasta do projeto (ex: JAVASCRITP),
 caso tenha outro projeto será necessário instalar novamente os pacotes
https://www.npmjs.com/

npm -v (Versão do NPM)
npm ls (Listar pacotes instalados)

npm init (Iniciar um novo projeto JavaScript)
    |_____ package.json

npm i nome_do_pacote (instalar um novo pacote/biblioteca)
npm r nome_do_pacote (remover um pacote/biblioteca)


json = JavaScript Object Notation

________________________________________________________________________________________

Variáveis e Constantes

Uma constante é como uma variável, mas com uma diferença importante: uma vez que você define o valor de uma constante, 
ele não pode ser alterado durante a execução do programa.

Uma variável é um espaço na memória do computador onde armazenamos dados que podem ser utilizados e modificados durante
a execução de um programa. O nome "variável" vem do fato de que o valor armazenado pode variar ao longo do tempo, conforme o programa roda.

Por que usar variáveis?
Para guardar informações que você vai precisar mais tarde.
Para realizar cálculos ou tomar decisões baseadas em diferentes valores.

Por que usar constantes?
Segurança: Se você sabe que um valor não deve ser alterado em seu programa, usar uma constante evita erros.
Legibilidade: Quando você usa uma constante, deixa claro para quem está lendo o código que aquele valor é fixo e importante.
Boas práticas: Em muitos casos, é recomendado usar constantes sempre que possível para valores que não precisam mudar, facilitando a manutenção do código.

Nas linguagens de programação as variáveis são tipadas ou dinamicamente tipadas

Existem 3 tipos de variáveis(independente da linguagem):

String -> Caracteres e numeros(Textos em geral)
Number -> Numeros(Inteiros e decimais)
Boolean -> Verdadeiro ou Falso (True or False)

ATENÇÃO: No JS uma variável pode ser criada usando let ou var
var (Obsoleto e inseguro), usar sempre o let

________________________________________________________________________________________

Comandos JavaScript (Sintaxe)

console.log() -> Escrever n console
console.clear() -> Limpar a tela do console
const -> Criar(declarar) uma constante
let -> Criar(declarar) uma variável
typeof() -> Verificar o tipo de variável



